This directory contains the necessary scripts to build and run a docker container that
is capable of running our middleware. 

The only dependency required to build the container is Docker itself. Docker can be 
obtained for Linux, Mac, or Windows. This container was only tested on Linux with Bash
(for which the scripts are designed) but may work on Mac. For windows users, please look
up commensurate windows commands for building and running the container.

Build.sh:
    Builds the docker image for use on your system. Build.sh reads the Dockerfile in PWD/build
    to construct an image for your OS with all the dependencies for our middleware as wel las the code.
    The image built is an ubuntu environment. 

runAUAVLinux.sh:
    Once the image is build, this script runs a container of the image and starts an interactive 
    session (Command line interface) with that container. The script opens ports used by the 
    middleware to communicate with the Android Virtual Machine.

    Once the container is run, all development, testing, and building of our middleware can be done
    inside it. The container can communicate with the Android VM for APK installation and model execution
    as if it were your operating system (because it is part of your OS).
    
    Once the interactive session is closed, the container exist. If you wish to save the work you have done
    durring the interactive session, you can use the "docker commit" command to update the image,
    or commit your code to the git reroutlab git repository.

saveAUAVLinux.sh:
    This script saves your docker image as a tar ball. This image can be imported into docker without the need
    to perform a rebuild. Unlike a docker commit, docker save will write the image to disk, and is a more
    heavy weight operation. Only save your docker container if you need to remove your image from your machine
    and have committed data in said image that will not be reflected on a rebuild.

cleanDocker.bash:
    This script cleans up docker images and containers that have exited. This will reclaim portions of your 
    filesystem taken up by those dead images. If you build this docker image multiple times and notice missing
    space in your filesystem, run this script to reclaim it from dead images/containers.
